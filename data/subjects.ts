import { Topic } from "@/app/page";
import { algorythms } from "./topicsContent/algorythms";
import { programmingLanguages } from "./topicsContent/programmingLanguages";
import { variables } from "./topicsContent/variables";
import { aritmeticOperators } from "./topicsContent/aritmeticOperators";
import { relationalOperators } from "./topicsContent/relationalOperators";
import { logicalOperators } from "./topicsContent/logicalOperators";
import { compilersInterpreters } from "./topicsContent/compilersInterpreters";
import { constants } from "./topicsContent/constants";
import { conditionals } from "./topicsContent/conditionals";
import { stringMethod } from "./topicsContent/stringMethod";
import { mathMethod } from "./topicsContent/mathMethod";
import { loops } from "./topicsContent/loops";
import { loopsWhileMethod } from "./topicsContent/loopsWhileMethod";

export interface Subject {
  id: string;
  name: string;
  description: string;
  topics: Topic[];
}

export const subjects: Subject[] = [
  {
    id: "algoritmos-estruturas-dados",
    name: "Algoritmos e Estruturas de Dados",
    description: "Fundamentos de algoritmos, estruturas de dados e programa√ß√£o",
    topics: [
      {
        id: 5,
        title: "Algoritmos",
        description: "Introdu√ß√£o aos algoritmos",
        content: algorythms,
        tags: ["algoritmos", "l√≥gica", "programa√ß√£o"],
      },
      {
        id: 6,
        title: "Linguagens de Programa√ß√£o",
        description: "Tipos de linguagens e suas caracter√≠sticas",
        content: programmingLanguages,
        tags: ["linguagens", "programa√ß√£o", "tipos"],
      },
      {
        id: 7,
        title: "Vari√°veis",
        description: "Defini√ß√£o e uso de vari√°veis",
        content: variables,
        tags: ["vari√°veis", "programa√ß√£o", "dados"],
      },
      {
        id: 17,
        title: "Constantes",
        description: "Defini√ß√£o e uso de constantes",
        content: constants,
        tags: ["constantes", "programa√ß√£o", "dados"],
      },
      {
        id: 8,
        title: "Operadores Aritm√©ticos",
        description: "Uso de operadores matem√°ticos",
        content: aritmeticOperators,
        tags: ["operadores", "aritm√©ticos", "matem√°tica"],
      },
      {
        id: 9,
        title: "Operadores Relacionais",
        description: "Compara√ß√£o entre valores",
        content: relationalOperators,
        tags: ["operadores", "relacionais", "compara√ß√£o"],
      },
      {
        id: 10,
        title: "Operadores L√≥gicos",
        description: "Condi√ß√µes e express√µes l√≥gicas",
        content: logicalOperators,
        tags: ["operadores", "l√≥gicos", "condi√ß√µes"],
      },
      {
        id: 11,
        title: "Compiladores e Interpretadores",
        description: "Diferen√ßa entre compiladores e interpretadores",
        content: compilersInterpreters,
        tags: ["compiladores", "interpretadores", "execu√ß√£o"],
      },
      {
        id: 12,
        title: "Estruturas Condicionais",
        description: "Exemplos pr√°ticos de IF e Switch-Case",
        content: conditionals,
        tags: ["condicional", "if", "switch-case"],
      },
      {
        id: 14,
        title: "M√©todo String",
        description: "Manipula√ß√£o de strings",
        content: stringMethod,
        tags: ["strings", "texto", "manipula√ß√£o"],
      },
      {
        id: 15,
        title: "M√©todo Math",
        description: "Opera√ß√µes matem√°ticas em programa√ß√£o",
        content: mathMethod,
        tags: ["matem√°tica", "c√°lculo", "math"],
      },
      {
        id: 16,
        title: "La√ßos de Repeti√ß√£o - For",
        description: "Uso do la√ßo de repeti√ß√£o For",
        content: loops,
        tags: ["for", "loop", "repeti√ß√£o"],
      },
      {
        id: 18,
        title: "La√ßos de Repeti√ß√£o - Do, Do-While",
        description: "Uso dos la√ßos de repeti√ß√£o Do e Do-While",
        content: loopsWhileMethod,
        tags: ["for", "loop", "do", "do-while", "repeti√ß√£o"],
      },
    ],
  },
  {
    id: "projeto-integrador-extensionista",
    name: "Projeto Integrador Extensionista",
    description:
      "Desenvolvimento de projetos extensionistas e integra√ß√£o comunit√°ria",
    topics: [
      {
        id: 20,
        title: "Fluxo de Requisi√ß√µes Web",
        description:
          "Processo completo de requisi√ß√µes web do cliente ao servidor",
        content: `## üåê Fluxo de Requisi√ß√µes Web

### Processo Completo:
1. **Cliente/Browser** - Digita URL no navegador
2. **Servidor DNS** - Resolve o dom√≠nio para IP
3. **Servidor Backend** - Recebe requisi√ß√£o e retorna arquivos (HTML, CSS, JS)

### Detalhamento:
- O navegador envia uma requisi√ß√£o HTTP para o servidor
- O DNS converte o nome do dom√≠nio em um endere√ßo IP
- O servidor processa a requisi√ß√£o e retorna os recursos necess√°rios
- O navegador renderiza a p√°gina com os arquivos recebidos`,
        tags: ["web", "requisi√ß√µes", "http", "dns"],
      },
      {
        id: 21,
        title: "Arquitetura do Sistema",
        description: "Tecnologias e estrutura do sistema de cantina",
        content: `## üèóÔ∏è Arquitetura do Sistema

### Tecnologias Principais:
- **Backend**: NestJS (Framework Node.js)
- **Banco de Dados**: PostgreSQL (Relacional)
- **ORM**: Prisma
- **Containeriza√ß√£o**: Docker + Docker Compose
- **Arquitetura**: REST API

### Estrutura NestJS:
- **Controller** - Recebe requisi√ß√µes HTTP, processa par√¢metros e retorna respostas
- **Service** - Cont√©m l√≥gica de neg√≥cio, valida√ß√µes e intera√ß√£o com banco
- **Module** - Agrupa controllers e providers por dom√≠nio

### Vantagens da Arquitetura:
- Separa√ß√£o clara de responsabilidades
- Facilita manuten√ß√£o e testes
- Escalabilidade e performance`,
        tags: ["arquitetura", "nestjs", "postgresql", "prisma", "docker"],
      },
      {
        id: 22,
        title: "Banco de Dados PostgreSQL",
        description: "Estrutura e relacionamentos do banco de dados",
        content: `## üóÑÔ∏è Banco de Dados

### Por que PostgreSQL?
- Estrutura baseada em tabelas com colunas e tipos definidos
- Garante consist√™ncia e integridade dos dados
- Ideal para m√≥dulo de "Cadastros" (Produtos, Categorias, Usu√°rios)

### Relacionamentos Principais:
- **Produtos ‚Üî Categorias**: Um-para-muitos (1:N)
  - Uma categoria pode ter v√°rios produtos

### Vantagens do Banco Relacional:
- ACID (Atomicidade, Consist√™ncia, Isolamento, Durabilidade)
- Integridade referencial
- Consultas complexas com JOINs
- Padroniza√ß√£o de dados`,
        tags: ["postgresql", "banco-dados", "relacional", "relacionamentos"],
      },
      {
        id: 23,
        title: "Ferramentas de Desenvolvimento",
        description: "Docker Compose e Prisma para desenvolvimento",
        content: `## üîß Ferramentas de Desenvolvimento

### Docker Compose - Vantagens:
- Ambiente padronizado para toda equipe
- Isolamento de depend√™ncias
- Facilita setup do backend + PostgreSQL
- Reprodutibilidade entre ambientes

### Prisma:
- **Comando para migrations**: \`npx prisma migrate dev\`
- **Sintaxe para buscar por ID**: \`prisma.produto.findUnique({ where: { id } })\`

### Comandos √öteis:
- \`docker-compose up\` - Inicia os servi√ßos
- \`docker-compose down\` - Para os servi√ßos
- \`npx prisma studio\` - Interface visual do banco`,
        tags: ["docker", "prisma", "desenvolvimento", "migrations"],
      },
      {
        id: 24,
        title: "Ambientes e Deploy",
        description: "Ambientes de desenvolvimento e CI/CD",
        content: `## üöÄ Ambientes e Deploy

### Ambientes de Desenvolvimento:
- **Desenvolvimento** - M√°quina local
- **Homologa√ß√£o** - Testes em cen√°rio controlado similar ao real
- **Produ√ß√£o** - Ambiente final para clientes

### CI/CD (Integra√ß√£o/Entrega Cont√≠nua):
**Objetivo**: Automatizar build, testes e deploy para maior agilidade e seguran√ßa

### Benef√≠cios do CI/CD:
- Deploy automatizado
- Testes cont√≠nuos
- Redu√ß√£o de erros
- Entrega mais r√°pida`,
        tags: ["deploy", "ci-cd", "ambientes", "produ√ß√£o"],
      },
      {
        id: 25,
        title: "Autentica√ß√£o e Seguran√ßa",
        description: "Sistema de autentica√ß√£o com JWT",
        content: `## üîê Autentica√ß√£o e Seguran√ßa

### Token JWT (JSON Web Token):
**Fun√ß√£o**: Cliente envia em requisi√ß√µes futuras para comprovar identidade, sem reenviar credenciais

### Como Funciona:
1. Usu√°rio faz login com credenciais
2. Servidor valida e gera JWT
3. Cliente armazena o token
4. Token √© enviado em requisi√ß√µes futuras
5. Servidor valida o token

### Vantagens do JWT:
- Stateless (sem estado no servidor)
- Seguro e criptografado
- Padr√£o da ind√∫stria
- Escal√°vel`,
        tags: ["jwt", "autentica√ß√£o", "seguran√ßa", "token"],
      },
      {
        id: 26,
        title: "Projeto da Cantina",
        description: "M√≥dulos e fluxo do sistema de cantina",
        content: `## üìä Projeto da Cantina

### Fluxo de Navega√ß√£o:
**Para cadastrar novo refrigerante**:
\`Autentica√ß√£o ‚Üí Cadastros ‚Üí Produtos\`

### M√≥dulos do Sistema:
- **Autentica√ß√£o** - Login/logout
- **Dashboard** - Vis√£o geral
- **PDV** - Ponto de venda
- **Cadastros** - Produtos, categorias, usu√°rios
- **Relat√≥rios** - Dados anal√≠ticos

### Funcionalidades Principais:
- Gest√£o de produtos e categorias
- Sistema de vendas (PDV)
- Controle de usu√°rios
- Relat√≥rios de vendas
- Autentica√ß√£o segura`,
        tags: ["cantina", "pdv", "cadastros", "relat√≥rios", "dashboard"],
      },
      {
        id: 27,
        title: "API REST",
        description: "Padr√µes e verbos HTTP para APIs",
        content: `## üåç API REST

### Verbos HTTP por A√ß√£o:
- **GET** - Buscar dados
- **POST** - Criar novos recursos
- **PATCH/PUT** - Atualizar recursos
- **DELETE** - Remover recursos

### Exemplos de Endpoints:
- \`GET /produtos\` - Listar produtos
- \`POST /produtos\` - Criar produto
- \`PATCH /produtos/:id\` - Atualizar produto
- \`DELETE /produtos/:id\` - Deletar produto

### Princ√≠pios REST:
- Stateless
- Cacheable
- Client-Server
- Uniform Interface
- Layered System`,
        tags: ["api", "rest", "http", "endpoints", "verbos"],
      },
      {
        id: 28,
        title: "Conceitos-Chave",
        description: "Resumo dos principais conceitos da disciplina",
        content: `## üí° Conceitos-Chave Revisados

1. **ORM** - Permite escrever queries em JavaScript/TypeScript sem SQL manual
2. **Ambientes separados** - Testes seguros antes da produ√ß√£o  
3. **Banco relacional** - Estrutura consistente para dados estruturados
4. **Docker** - Padroniza√ß√£o e isolamento de ambiente
5. **JWT** - Autentica√ß√£o stateless moderna
6. **REST** - Padr√£o para APIs web escal√°veis

### Resumo da Arquitetura:
- **Frontend** ‚Üí **API REST** ‚Üí **Backend NestJS** ‚Üí **PostgreSQL**
- **Docker** para containeriza√ß√£o
- **Prisma** como ORM
- **JWT** para autentica√ß√£o
- **CI/CD** para deploy automatizado`,
        tags: ["conceitos", "resumo", "arquitetura", "tecnologias"],
      },
    ],
  },
];

export function getSubjectById(subjectId: string): Subject | undefined {
  return subjects.find((subject) => subject.id === subjectId);
}

export function searchTopicsInSubject(
  subjectId: string,
  searchTerm: string
): Topic[] {
  const subject = getSubjectById(subjectId);
  if (!subject) return [];

  if (!searchTerm) return subject.topics;

  const normalizedSearch = searchTerm.toLowerCase();

  return subject.topics.filter((topic) => {
    const titleMatch = topic.title.toLowerCase().includes(normalizedSearch);
    const descriptionMatch = topic.description
      .toLowerCase()
      .includes(normalizedSearch);
    const contentMatch = topic.content.toLowerCase().includes(normalizedSearch);

    return titleMatch || descriptionMatch || contentMatch;
  });
}
